# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Spencer Tung
Student ID: 004355860
Email: spencer.zh.tung@gmail.com

# Partner 2 (if you're working in a team)
Name: Li Tseng
Student ID: 304272081
Email: lindatseng.0816@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We decided to use the forking method to implement our parallelism. Our design
downloads all files in parallel first, then begins any uploads that are 
requested, also in parallel (if multiple files are requested at once).


# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
1) Trying to service an upload request that was longer than FILENAMESIZ would
trigger a buffer overflow attack in task_upload. The osp2p_snscanf function
will try to fit t->tail bytes into t->filename - if t->tail exceeds the
filename buffer size, then the program will crash. This was fixed by checking
for this overflow before reading from the t->buf.

2) Using a filename that was longer than FILENAMESIZ would trigger a buffer 
overflow in start_download. Fixed using strncpy of the destination size. Though
the code apparently also already checks whether the filename exceeds out
FILENAMESIZ, so this may not have been a necessary fix.

3) Not necessary in this lab, but in the event that our filename and 
disk_filename string sizes were changed to be different, our code would catch
another potential buffer overflow in task_download with strcpy. Fixed using 
strncpy on the destination size.


# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1) Defending against large file size transfers by implementing a hard limit 
(10MB).

2) Defending against people searching other directories by checking for the 
"/" character in the file name (as subdirectories are also not allowed).

3) Dynamically resizing the task buffer size if the TASKBUFSIZ is exceeded.
This bug fix involved changing the buffer from a fixed char size to a char 
pointer, and adding a new data member that kept track of the current buffer
size.


# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
1) The first kind of attack we implement is trying to get a file that is not in
the test directory that we are normally restricted to. We use a WHO command to
find all peers on our list (instead of restricting ourselves to just the peers
who have the file we want registered), then we go through our peer list until we 
find a peer that is willing to send the file we are trying to steal. Then we 
connect to that peer and begin downloading. This is an attack because it 
violates the privacy that users normally would expect from using an 
application, as the application claims to limit file transfers to the working 
directory only.


# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
